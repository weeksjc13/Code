Sat Oct 15 18:26:33 2016
File /home/INTRA/weeksj13/3675/Assign 4/testderiv


Trapped exception domainX("0^0")

--Attempt to evaluate a function with a parameter not in its domain


Instruction that caused the trap: FAIL
Instruction argument(s) [Internal form]:
{"0^0":15}


  ------------------------------------------------------
 |Note: the computation has used optimizations that     |
 |might result in losses of stack frames and losses of  |
 |identifier bindings in what follows.  To avoid losing |
 |information, rerun with option -t on the command line.|
  ------------------------------------------------------


======================================================
              Configuration
======================================================

 For each thread the run-time stack is shown deepest level first.
 Each frame shows the function, the package where the function
 is defined, and the line number in that package.  The values of
 bound names are shown in each frame.

======================================================
          Active Thread 20  (group 20)
======================================================
  thread name = "Execute-testderiv-1"
  group name  = "Execute-testderiv-1"
  Running Execute
  Running
======================================================

    Function             Package               Line
    --------             -------               ----
  4.^*                   LibraryMathFunImp       38
    Param type:  (Real, Real)
    Result type: Real

    p: Real
      = 0
    x: Real
      = 0
    sgnx: Integer
      = 0
    -----------------------------------------------
  3.simplifyExpo         deriv                  368
    Param type:  Expression
    Result type: Expression

    param-1: Expression
      = (0^0)
    -----------------------------------------------
  2.ShowSimplify         testderiv               16
    Param type:  Expression
    Result type: ()

    -----------------------------------------------
  1.Execute-testderiv-1  testderiv               54
    Result type: ()

    -----------------------------------------------

======================================================
Nonshared box contents for preceding activation (Unlisted are empty):
======================================================

  (cmg.precisionBx)
       1 : Integer
          = 15
  (cmg.stdoutBx)
       2 : Outfile of (Char)
          = (stdout)
  (cmg.stderrBx)
       3 : Outfile of (Char)
          = (stderr)
  (cmg.cwdBx)
       5 : String
          = "/home/INTRA/weeksj13/3675/Assign 4"

       6 : Boolean
          = false

======================================================
                  Shared box contents
======================================================

       8 : Boolean
          = true
      10 : String
          = (stdin)
      12 : [(String -> (Any, String))]
          = [(function wrapGetter: (String -> (Cmg.Any, String))),(function wrapGetter: (String -> (Cmg.Any, String))),(function wrapGetter: (String -> (Cmg.Any, String))),(function wrapGetter: (String -> (Cmg.Any, String))),(function wrapGetter: (String -> (Cmg.Any, String))),(function wrapGetter: (String -> (Cmg.Any, String))),(function wrapGetter: (String -> (Cmg.Any, String))),(function wrapGetter: (String -> (Cmg.Any, String))),(function wrapGetter: (String -> (Cmg.Any, String))),(function wrapGetter: ...

======================================================
            Non-function Globals
======================================================

cmg.commandLine
  : [String]
  = []
cmg.getWrappedBox
  : [:[(String -> (Any, String))]:]
  = (shared box 12)
cmg.largest
  : Char
  = '\{255}'
cmg.showCharsQuotedBx
  : [:Boolean:]
  = (shared box 8)
cmg.showIntrinsicBx
  : [:Boolean:]
  = (nonshared box 6)
cmg.smallDigits
  : Integer
  = 12
deriv.xx
  : Expression
  = x
