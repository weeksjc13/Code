#include <stdio.h>
#include <stdlib.h>
#include <semaphore.h>
#include <time.h>
#include <pthread.h>
#define bookcase 10

sem_t mutex;
sem_t empty;
sem_t full;

FILE *proFile;
FILE *conFile;

int insert_item();
int remove_item();
void *producer();
void *consumer();

int items;
int inCount = 0;
int outCount = 0;
int shelf[bookcase];

int main(int argc, char *argv[])
{
	items = atoi(argv[1]);
	proFile = fopen("production.txt", "w");
	if (proFile == NULL)
  	{
  		printf("omg what");
  	  	exit(1);
  	}
	conFile = fopen("consumtion.txt", "w");

	pthread_t proid, conid;
	pthread_attr_t tattr;
	pthread_attr_init(&tattr);
	pthread_attr_setscope(&tattr, PTHREAD_SCOPE_SYSTEM);
	
	sem_init(&mutex, 1, 1);
	sem_init(&empty, 1, bookcase);
	sem_init(&full, 1, 0);

	pthread_create(&proid, &tattr, producer , NULL);
	//int pthread_create(pthread_t *proid, const pthread_attr_t *tattr, void *(*producer) (void *), void *arg);
	pthread_create(&conid, &tattr, consumer, NULL);
	//int pthread_create(pthread_t *conid, const pthread_attr_t *tattr, void *(*consumer) (void *), void *arg);
	pthread_join(proid, NULL);
	pthread_join(conid, NULL);

	fclose(proFile);
	fclose(conFile);

}

void *producer()
{
	int item;
	int i;
	for(i = 0; i < items; i++)
	{
		sem_wait(&empty);
		sem_wait(&mutex);
		item = insert_item();
		sem_post(&mutex);
		sem_post(&full);
		printf("Prouced %d\n", item);
		fprintf(proFile, "%d\n",  item);
	}
}
void *consumer()
{
	int item;
	int i;
	for(i = 0; i < items; i++)
	{
		sem_post(&full);
		sem_wait(&mutex);
		item = remove_item();
		sem_post(&mutex);
		sem_wait(&empty);
		printf("Consumed %d\n", item);
		fprintf(conFile, "%d\n", item);
	}
}

int insert_item()
{
	int randNums = rand() % 100 + 1;
	if(inCount > 9)
	{
		inCount = 0;
	}
	shelf[inCount] = randNums;
	inCount ++;
	return randNums;
}
int remove_item()
{
	if(outCount > 9)
	{
		outCount = 0;
	}
	int consumed = shelf[outCount];
	shelf[outCount] = -1;
	outCount++;
	return consumed;
}
