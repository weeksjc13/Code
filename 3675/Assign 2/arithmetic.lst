Wed Sep 21 17:30:11 2016
ECU Cinnameg, version 9.0.5 (byte code version 73)
File /home/INTRA/weeksj13/3675/Assign 2/arithmetic.cmg


   1 %% Name: Josh Weeks
   2 %% Date: 9/21/16
   3 %% Tabs: none
   4 
   5 Package arithmetic
   6 
   7 %% This package provides functions for working with integers,
   8 %% represented as binary lists.
   9 %% Lists begin with the low order end of the number.
  10 %% For example, list [1,1,0,0,1] stands for the binary number
  11 %% 10011, or 19 in decimal.
  12 %%
  13 %% A list is *normalized if it does not end on 0.  All of the
  14 %% following functions produce normalized results, even if the
  15 %% parameter(s) are not normalized.
  16 
  17 ================================================================
  18                         export
  19 ================================================================
  20 
  21 Abbrev Bit = Integer.
  22 
  23 Expect
  24   inc           : [Bit] -> [Bit]
  25 
  26                 %: inc(x) is x+1, where both x and the result are
  27                 %: binary numbers represented as lists.
  28                 %: For example inc([1,0,1,1]) = [0,1,1,1]

--> arithmetic.inc
              : ([Integer] -> [Integer])
              Expect {--public--}

  29                 ;
  30 
  31   dec           : [Bit] -> [Bit]
  32 
  33                 %: dec(x) = max(0, x-1), where x and the result are
  34                 %: binary numbers represented as lists.

--> arithmetic.dec
              : ([Integer] -> [Integer])
              Expect {--public--}

  35                 ;
  36 
  37   sum           :  ([Bit], [Bit]) -> [Bit]
  38 
  39                 %: sum(x,y) = x + y, where x, y and the result are
  40                 %: binary numbers represented as lists.  For example,
  41                 %: sum([0,1,1], [1,1,1]) = [1,0,1,1].  (6 + 7 = 13)

--> arithmetic.sum
              : (([Integer], [Integer]) -> [Integer])
              Expect {--public--}

  42                 ;
  43 
  44  diff          :  ([Bit], [Bit]) -> [Bit]
  45 
  46                 %: diff(x,y) = max(0, x - y), where x, y and the result are
  47                 %: binary numbers represented as lists.  For example,
  48                 %: diff([1,1,1], [0,1,1]) = [1]  (7 - 6 = 1) and
  49                 %: diff([0,1,1], [1,1,1]) = []  (6 - 7 = 0).

--> arithmetic.diff
              : (([Integer], [Integer]) -> [Integer])
              Expect {--public--}

  50                 ;
  51 
  52   product       : ([Bit], [Bit]) -> [Bit]
  53 
  54                 %: product(x,y) = x * y, where x, y and the result are
  55                 %: binary numbers represented as lists.  For example,
  56                 %: product([1,1], [1,1]) = [1,0,0,1].  (3*3 = 9)

--> arithmetic.product
              : (([Integer], [Integer]) -> [Integer])
              Expect {--public--}

  57                 ;
  58 
  59   compareInts   : ([Bit], [Bit]) -> Char
  60 
  61                 %: compareInts(x,y) yields
  62                 %:    '<'  if x < y
  63                 %:    '='  if x = y
  64                 %:    '>'  if x > y
  65                 %: where x and y are binary numbers represented as
  66                 %: lists.  For example, compareInts([0,0,1,1], [0,1,0,1])
  67                 %: yields '>', since 12 > 10.

--> arithmetic.compareInts
              : (([Integer], [Integer]) -> Char)
              Expect {--public--}

  68   
  69 %Expect
  70 
  71 ================================================================
  72                         implementation
  73 ================================================================
  74 
  75 Import removeTrailing from "collect/list".

--> Import "/usr/local/lib/cinnameg/9-0-5/lib/collect/list.cmg"

--> Import "/usr/local/lib/cinnameg/9-0-5/lib/collect/listfun.cmg"

--> Import "/usr/local/lib/cinnameg/9-0-5/lib/collect/fold.cmg"

--> Import "/usr/local/lib/cinnameg/9-0-5/lib/collect/prefsuff.cmg"

--> Import "/usr/local/lib/cinnameg/9-0-5/lib/collect/search.cmg"

--> Import "/usr/local/lib/cinnameg/9-0-5/lib/collect/zip.cmg"

  76 Define normalize = removeTrailing 0.

--> private.normalize
              : ([<a>] -> [<a>])
                where(<a:AnyNum>)
              Define {--private--}

  77 
  78 ===============================================================
  79 %%                    inc(x)
  80 %% adds 1 to a binary number x
  81 %% binary number represented in reverse order 100 = 001
  82 %% normalized result
  83 ===============================================================
  84 
  85 %% incn is similar to inc, but does not normalize its result.
  86 %% (n stands for non-normalizing)
  87 
  88 Define 
  89   ----------------------------------------------
  90   %% 0 + 1 = 1
  91   case incn []       = [1]
  92   ----------------------------------------------
  93   %% (2t) + 1 = 2t + 1
  94   case incn (0 :: t) = 1 :: t
  95   ----------------------------------------------
  96   %% (2t+1) + 1 = 2(t+1)
  97   case incn (1 :: t) = 0 :: incn t
  98   ----------------------------------------------
  99 %Define

--> private.incn
              : ([<a>] -> [<a>])
                where(<a:AnyNum>)
              Define {--private--}

 100 
 101 Define inc x = normalize(incn x).

--> arithmetic.inc
              : ([Integer] -> [Integer])
              Define {--public--}

 102 
 103 Example inc [1,1,0,1,1,0,0] = [0,0,1,1,1].
 104 Example inc [1] = [0,1].
 105 Example inc [1,0,0] = [0,1].
 106 
 107 ===============================================================
 108 %%                    dec(x)
 109 %% subtracts 1 from a binary number x
 110 %% binary number represented in reverse order 100 = 001
 111 %% normalized result
 112 ===============================================================
 113 
 114 %% decn is similar to inc, but does not normalize its result.
 115 %% (n stands for non-normalizing)
 116 
 117 Define 
 118   ----------------------------------------------
 119   %% 0 - 1 = 0
 120   case decn []       = []
 121   ----------------------------------------------
 122   %% 1 - 1 = 0 concatinated with the tail
 123   case decn (1 :: t) = 0 :: t
 124   ----------------------------------------------
 125   %% 0 - 1 = 1
 126   case decn (0 :: t) = 1 :: decn t
 127   ----------------------------------------------
 128 %Define

--> private.decn
              : ([<a>] -> [<a>])
                where(<a:AnyNum>)
              Define {--private--}

 129 
 130 Define dec x = normalize(decn x).

--> arithmetic.dec
              : ([Integer] -> [Integer])
              Define {--public--}

 131 
 132 Example dec [1,1,0,1,1,0,0] = [0,1,0,1,1].
 133 Example dec [0,0,0,1] = [1,1,1].
 134 Example dec [1] = [].
 135 Example dec [1,0,0] = [].
 136 
 137 ===============================================================
 138 %%                    sum(x,y)
 139 %% addition of binary numbers x and y
 140 %% binary number represented in reverse order 100 = 001
 141 %% normalized result
 142 ===============================================================
 143 
 144 
 145 Define 
 146   ----------------------------------------------
 147   %% an empty list added to an empty list will result in an empty list
 148   case sumn ([], [])     = []
 149   ----------------------------------------------
 150   %% an empty list added to a list y will result in the list y
 151   case sumn ([], y)     = y
 152   ----------------------------------------------
 153   %% a list x added to an empty list will result in the list x
 154   case sumn (x, [])     = x
 155   ----------------------------------------------
 156   %% 0 + 0 = 0
 157   case sumn (0 :: x, 0 :: y) = 0 :: sumn (x, y)
 158   ----------------------------------------------
 159   %% 1 + 1 = 0 carry is handled by incrementing x
 160   case sumn (1 :: x, 1 :: y) = 0 :: sumn (inc(x), y)
 161   ----------------------------------------------
 162   %% 1 + 0 = 1
 163   case sumn (1 :: x, 0 :: y) = 1 :: sumn (x, y)
 164   ----------------------------------------------
 165   %% 0 + 1 = 1
 166   case sumn (0 :: x, 1 :: y) = 1 :: sumn (x, y)
 167   ----------------------------------------------
 168 %Define

--> private.sumn
              : (([Integer], [Integer]) -> [Integer])
              Define {--private--}

 169 
 170 Define sum (x, y) = normalize(sumn(x, y)).

--> arithmetic.sum
              : (([Integer], [Integer]) -> [Integer])
              Define {--public--}

 171 
 172 Example sum ([0,1,0,1,1,0,0], [1]) = [1,1,0,1,1].
 173 Example sum ([1], [0,1]) = [1,1].
 174 Example sum ([0,0,1], [1]) = [1,0,1].
 175 
 176 ===============================================================
 177 %%                    compareInts(x, y)
 178 %% x and y are binary numbers
 179 %% if x > y returns '>'
 180 %% if x < y returns '<'
 181 %% if x = y returns '='
 182 %% binary number represented in reverse order 100 = 001
 183 %% normalized result
 184 ===============================================================
 185 
 186 Define
 187   ----------------------------------------------
 188   %% empty set is equal to empty set
 189   case compareInts ([], [])     = '='
 190   ----------------------------------------------
 191   %% head of 0 is equal to the head of 0, it will be equal if the rest of the list is also equal
 192   case compareInts (0 :: x, 0 :: y)     = '=' when compareInts(x, y) == '='
 193   ----------------------------------------------
 194   %% head of 1 is equal to head of 1, it will be equal if the rest of the list is also equal
 195   case compareInts (1 :: x, 1 :: y)     = '=' when compareInts(x, y) == '='
 196   ----------------------------------------------
 197   %% if there are all zeroes on a list it is possible the lists are equivelent (account for non normalized list)
 198   case compareInts (0 :: x, [])     = '=' when compareInts(x, []) == '='
 199   ----------------------------------------------
 200   %% a list can be greater than the empty list when reading a zero if the rest of the list is greater than the empty list
 201   case compareInts (0 :: x, [])     = '>' when compareInts(x, []) == '>'
 202   ----------------------------------------------
 203   %% if there are all zeroes on a list it is possible the lists are equivelent (account for non normalized list)
 204   case compareInts ([], 0 :: y)     = '=' when compareInts([], y) == '='
 205   ----------------------------------------------
 206   %% a list can be greater than the empty list when reading a zero if the rest of the list is greater than the empty list
 207   case compareInts ([], 0 :: y)     = '<' when compareInts([], y) == '<'
 208   ----------------------------------------------
 209   %% if a list has a 1 at the head and the other list is empty, the list with the 1 will always be greater
 210   case compareInts ([], 1 :: ?)     = '<' 
 211   ----------------------------------------------
 212   %% if a list has a 1 at the head and the other list is empty, the list with the 1 will always be greater
 213   case compareInts (1 :: ?, [])     = '>'
 214   ----------------------------------------------
 215   %% the head of the lists are 0 and x does not equal y therefore '<' if x <= y
 216   case compareInts (0 :: x, 0 :: y)     = '<' when compareInts(x, y) == '<'
 217   ----------------------------------------------
 218   %% the head of the lists are 0 and x does not equal y therefore '>' if x >= y
 219   case compareInts (0 :: x, 0 :: y)     = '>' when compareInts(x, y) == '>'
 220   ----------------------------------------------
 221   %% the head of the lists are 1 and x does not equal y therefore '<' if x < y
 222   case compareInts (1 :: x, 1 :: y)     = '<' when compareInts(x, y) == '<' 
 223   ---------------------------------------------
 224   %% the head of the lists are 0 and x does not equal y therefore '>' if x > y
 225   case compareInts (1 :: x, 1 :: y)     = '>' when compareInts(x, y) == '>'
 226   ----------------------------------------------
 227   %% the head of the first list is 0 and the second is 1 therefore '<' if x <= y
 228   case compareInts (0 :: x, 1 :: y)     = '<' when compareInts(x, y) =/= '>'
 229   ----------------------------------------------
 230   %% the head of the first list is 0 and the second is 1 therefore '>' if x <= y
 231   case compareInts (0 :: x, 1 :: y)     = '>' when compareInts(x, y) =/= '<'
 232   ----------------------------------------------
 233   %% the head of the first list is 1 and the second is 0 therefore '>' if x >= y
 234   case compareInts (1 :: x, 0 :: y)     = '>' when compareInts(x, y) =/= '<'
 235   ----------------------------------------------
 236   %% the head of the first list is 1 and the second is 0 therefore '<' if x >= y
 237   case compareInts (1 :: x, 0 :: y)     = '<' when compareInts(x, y) =/= '>'
 238   ----------------------------------------------
 239 %Define

--> arithmetic.compareInts
              : (([Integer], [Integer]) -> Char)
              Define {--public--}

 240 
 241 Example compareInts ([0,1,0,1,1,0,0], [1]) = '>'.
 242 Example compareInts ([1], [0, 1]) = '<'.
 243 Example compareInts ([1,0,1], [1,1,1]) = '<'.
 244 Example compareInts ([1,0,1], [1,1]) = '>'.
 245 Example compareInts ([], []) = '='.
 246 Example compareInts ([1], []) = '>'.
 247 Example compareInts ([], [1]) = '<'.
 248 Example compareInts ([0,0,0], [0]) = '='.
 249 Example compareInts ([0,0,0,0,0,0], []) = '='.
 250 
 251 ===============================================================
 252 %%                    diff(x,y)
 253 %% the difference of binary numbers x and y (x subtract y)
 254 %% binary number represented in reverse order 100 = 001
 255 %% normalized result
 256 ===============================================================
 257 
 258 Define
 259   ----------------------------------------------
 260   %% when x <= y the difference will always be 0 ([])
 261   case diffn (x, y)     = [] when compareInts(x, y) =/= '>'
 262   ----------------------------------------------
 263   %% when a list (x) subtracts an empty list it will always be the list (x)
 264   case diffn (x, [])     = x
 265   ----------------------------------------------
 266   %% 0 - 0 = 0 concatinated to the difference of tails x and y
 267   case diffn (0 :: x, 0 :: y) = 0 :: diffn (x, y)
 268   ----------------------------------------------
 269   %% 1 - 0 = 1 concatinated to the difference of tails x and y
 270   case diffn (1 :: x, 0 :: y) = 1 :: diffn (x, y)
 271   ----------------------------------------------
 272   %% 1 - 1 = 0 concatinated to the difference of tails x and y if x >= y
 273   case diffn (1 :: x, 1 :: y) = 0 :: diffn (x, y) when compareInts(x, y) =/= '<'
 274   ----------------------------------------------
 275   %% 0 - 1 = 0 concatinated to the difference of tails x and y if x < y
 276   case diffn (0 :: x, 1 :: y) = 0 :: diffn (x, y) when compareInts(x, y) == '<'
 277   ----------------------------------------------
 278   %% %% 0 - 1 = 0 concatinated to the difference of tails x and y if x >= y (case accounts for the borrow)
 279   case diffn (0 :: x, 1 :: y) = 1 :: diffn (dec(x), y) when compareInts(x, y) =/= '<'
 280   ----------------------------------------------
 281 %Define

--> private.diffn
              : (([Integer], [Integer]) -> [Integer])
              Define {--private--}

 282 
 283 Define diff (x, y) = normalize(diffn(x, y)).

--> arithmetic.diff
              : (([Integer], [Integer]) -> [Integer])
              Define {--public--}

 284 
 285 Example diff ([0], [1]) = [].
 286 Example diff ([], [1,1,1]) = [].
 287 Example diff ([1,1,1], []) = [1,1,1].
 288 Example diff ([1,0,1], [1, 1]) = [0, 1].
 289 Example diff ([0,0,0,0,1], [1,0,1]) = [1,1,0,1].
 290 Example diff ([1,0,1],  []) = [1,0,1].
 291 
 292 ===============================================================
 293 %%                    product(x,y)
 294 %% the product of two binary numbers x and y
 295 %% binary number represented in reverse order 100 = 001
 296 %% normalized result
 297 ===============================================================
 298 
 299 Define
 300   ----------------------------------------------
 301   %% 0 * 0 = 0
 302   case productn ([], [])     = []
 303   ----------------------------------------------
 304   %% 0 * anything = 0
 305   case productn ([], ?)     = []
 306   ----------------------------------------------
 307   %% anything * 0 = 0
 308   case productn (?, [])     = []
 309   ----------------------------------------------
 310   %% 0 at the beginning of the first list adds a zero to the list and does the product of the tail of the first list and the entire list y
 311   case productn (0 :: x, y) = 0 :: productn (x, y)
 312   ----------------------------------------------
 313   %% 1 at the beginning of the first list does the sum of a zero concatinated to the product of list x and y PLUS the list y
 314   case productn (1 :: x, y) = sum(0 :: productn (x, y), y)
 315   ----------------------------------------------
 316 %Define

--> private.productn
              : (([<a:AnyNum>], [Integer]) -> [Integer])
              Define {--private--}

 317 
 318 Define product (x, y) = normalize(productn(x, y)).

--> arithmetic.product
              : (([Integer], [Integer]) -> [Integer])
              Define {--public--}

 319 
 320 Example product ([0,1,1], [1,0,0,0,1]) = [0,1,1,0,0,1,1].
 321 Example product ([0], [1,0,1]) = [].
 322 Example product ([], []) = [].
 323 Example product ([1,0,1], [0]) = [].
 324 Example product ([0,0,0,1], [1,1,1,1]) = [0,0,0,1,1,1,1].
 325 
 326 %Package
 327 

